#!/usr/bin/python3
# BY NOMO

from netmiko import Netmiko
from getpass import getpass
from pprint import pprint
import re
import os
import sys

# Vars

debug = 0

dc = input("Which DC are we looking in?\n  [1] BDS\n  [2] VLC\nChoose 1 or 2:  ").strip()
if dc != "1" and dc != "2":
    print("\nBad DC\n")
    quit()
user_input = input("\nInsert IP address or MAC address: ").strip()
username = input("Insert user to log into DC ASA FW and Nexus: ").strip()
password = getpass()
mac = "1"

if dc == "2":
    dc_fw_list = "VLC_DC_L3.txt"
    dc_sw_list = "VLC_DC_L2.txt"
else:
    dc_fw_list = "BDS_DC_L3.txt"
    dc_sw_list = "BDS_DC_L2.txt"

def debug_switch(debug, string_to_print):
    if debug == 1:
            print(string_to_print)

def find_arp_entry(connection_handle, context, ip, firewall):
    mac = "3"
    output = connection_handle.send_command("changeto context " + context)
    sh_arp = connection_handle.send_command("show arp | i " + ip, use_textfsm=True)
    if len(sh_arp) != 0:
        for line in sh_arp:
            for k, v  in line.items():
                #print("K = %s, V = %s" %(k,v))
                if k == 'address' and v == ip:
                    mac = line['mac']
                    #print("TRUE - MAC = " + mac)
                    break
        #mac = re.findall(r'\S+\s\S+\s(\S+)', sh_arp)[0]
        print("\nFound ARP entry:\n - ip: %s\n - context: %s\n - firewall %s\n - MAC: %s\n" %(ip, context, firewall, mac))
        fw_context_ip_mac = (firewall, context, ip , mac)
        return mac
    return "1"


# From https://stackoverflow.com/questions/10086572/ip-address-validation-in-python-using-regex
ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
#
ValidMacAddress_1 = "^([0-9a-f]{2}(?::[0-9a-f]{2}){5})$"
ValidMacAddress_2 = "^([0-9a-f]{4}(?:\-[0-9a-f]{4}){2})$"
ValidMacAddress_3 = "^([0-9a-f]{4}(?:\.[0-9a-f]{4}){2})$"

pattern_ip = re.compile(ValidIpAddressRegex)
pattern_mac_1 = re.compile(ValidMacAddress_1)
pattern_mac_2 = re.compile(ValidMacAddress_2)
pattern_mac_3 = re.compile(ValidMacAddress_3)

input_type = ""

if pattern_ip.match(user_input) is not None:
    input_type = "IP"
    debug_switch(debug,"--------DEBUG----------Input_type = IP")
elif pattern_mac_1.match(user_input) is not None:
    input_type = "MAC"
    debug_switch(debug,"--------DEBUG----------Input_type = MAC")
elif pattern_mac_2.match(user_input) is not None:
    input_type = "MAC"
    debug_switch(debug,"--------DEBUG----------Input_type = MAC")
elif pattern_mac_3.match(user_input) is not None:
    input_type = "MAC"
    debug_switch(debug,"--------DEBUG----------Input_type = MAC")
else:
    print("\nThe input format does not match an IP address or a MAC address.\n" + \
          "MAC valid formats:\n" +  \
          "  XX:XX:XX:XX:XX\n" + \
          "  XXXX-XXXX-XXXX\n" + \
          "  XXXX.XXXX.XXXX\n")
    exit()


if input_type == "IP":    
    ip = user_input

    # Open the firewall list
    with open(dc_fw_list) as file_handle:
        firewall_list = file_handle.read().splitlines()
        debug_switch(debug,"--------DEBUG----------Opening file" + dc_fw_list)
    
        # Connect to each firewall
    for firewall in firewall_list:
        asa = {
            'host': firewall,
            'username': username,
            'password': password,
            'device_type': 'cisco_asa'
        }
        auth_pending = True
        while auth_pending:
            try:
                debug_switch(debug,"--------DEBUG----------Now logging into " + firewall)
                conn1 = Netmiko(**asa)
                auth_pending = False
            except:
                print("\nAuthentication failed. This is host " + firewall)
                asa['username'] = input("\nEnter your Username FOR THIS HOST: ")
                asa['password'] = getpass()
                try:
                    conn1 = Netmiko(**asa)
                    pass
                except:
                    print("\nFailed to authenticate on " + firewall)
                    pass
    
        # Move to context sys to grab the list of all contexts
        command = "changeto context sys"
        debug_switch(debug,"--------DEBUG----------changeto context sys")
        output = conn1.send_command(command)
    
        command = "show run | i context"
        debug_switch(debug,"--------DEBUG----------Getting list of contexts")
        output = conn1.send_command(command).splitlines()
    
        # Get the list of contexts
        context_list = []
        
        for line in output:
            if line.startswith("context "):
                context_name = line.replace("context ", "")
                context_list.append(context_name)
                debug_switch(debug,"--------DEBUG----------Found context " + context_name)

        # In each context, look for the IP in the arp table.
        for context in context_list:
            debug_switch(debug,"--------DEBUG----------Calling find_arp_entry for %s %s %s" %(ip, firewall, context))
            mac = find_arp_entry(conn1, context, ip, firewall)
            if mac != "1":
                debug_switch(debug,"--------DEBUG----------Found MAC != 1 . MAC = " + mac)
                break
        else:
            debug_switch(debug,"--------DEBUG----------Triggering for-else clause - continue")
            continue
        break
    if mac == "1":
        debug_switch(debug,"--------DEBUG----------MAC still = 1. Should be quitting.")
        print("\nNo ARP entry was found for this IP in DC firewalls\nMake sure it is really supposed to be in this DC and not elsewhere (like edge)\n")
        quit()
# If the initial user input is a MAC address use mac variable
elif input_type == "MAC":
    mac = user_input
    debug_switch(debug,"--------DEBUG----------MAC is user input. Value: " + mac)

# By this point, user_input should have been identified as MAC, IP or smthing else.
# This "else" clause shour never run but just in case...
else:
    print("\nSomething went wrong. No MAC address found. Not sure why.")
    exit()

# At this point, take MAC no matter where it came from (user or ARP table) and search
# in all switches:

# Open switch list
print("\nNow looking for the switchports where MAC address %s is being learnt.\nThis may take a few minutes... \n" %(mac))
with open(dc_sw_list) as file_handle:
    debug_switch(debug,"--------DEBUG----------Opening switch_list file: " + dc_sw_list)
    switch_list = file_handle.read().splitlines()

# Connect over all switches in list lookinf for the MAC

for switch in switch_list:
    nexus = {
        'host': switch,
        'username': username,
        'password': password,
        'device_type': 'cisco_nxos'
    }
    
    try:
        debug_switch(debug,"--------DEBUG----------Now connecting to SWITCH: " + nexus['host'])
        debug_switch(debug,"--------DEBUG----------Trying creds: " + nexus['username'])
        conn1 = Netmiko(**nexus)
    except:
        debug_switch(debug,"--------DEBUG----------Now connecting to SWITCH: " + nexus)
        print("\nAuthentication failed for host " + switch)
        nexus['username'] = input("\nEnter your Username FOR THIS HOST (maybe dpko? just saying...: ")
        nexus['password'] = getpass()
        try:
            conn1 = Netmiko(**nexus)
            pass
        except:
            print("Failed to authenticate on " + nexus)
            pass
    
    command = "show mac add add " + mac
    debug_switch(debug,"--------DEBUG----------Command to be run: " + command)
    output = conn1.send_command(command).splitlines()
    #print("\n output found in " + switch + ":" + output)
    for output_line in output:
        if "dynamic" in output_line:
            port = re.findall(r'.*dynamic\s+\S+\s+\S+\s+\S+\s+(\S+)', output_line)[0]
            if port == "vPC":
                port = "Peer-link"
            print( "\n===> FOUND Mac address "+ mac +"\n  on switch: " + switch + "\n  and port: " + port +"\n" )
                    
    
